{"name": "Проверяем, что текст ответа на вопрос соответствует ожидаемому", "status": "broken", "statusDetails": {"message": "TypeError: unsupported callable", "trace": "func = <classmethod(<function TestQuestionAnswers.setup_class at 0x0000023BD4B0C900>)>\n\n    def getfullargspec(func):\n        \"\"\"Get the names and default values of a callable object's parameters.\n    \n        A tuple of seven things is returned:\n        (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations).\n        'args' is a list of the parameter names.\n        'varargs' and 'varkw' are the names of the * and ** parameters or None.\n        'defaults' is an n-tuple of the default values of the last n parameters.\n        'kwonlyargs' is a list of keyword-only parameter names.\n        'kwonlydefaults' is a dictionary mapping names from kwonlyargs to defaults.\n        'annotations' is a dictionary mapping parameter names to annotations.\n    \n        Notable differences from inspect.signature():\n          - the \"self\" parameter is always reported, even for bound methods\n          - wrapper chains defined by __wrapped__ *not* unwrapped automatically\n        \"\"\"\n        try:\n            # Re: `skip_bound_arg=False`\n            #\n            # There is a notable difference in behaviour between getfullargspec\n            # and Signature: the former always returns 'self' parameter for bound\n            # methods, whereas the Signature always shows the actual calling\n            # signature of the passed object.\n            #\n            # To simulate this behaviour, we \"unbind\" bound methods, to trick\n            # inspect.signature to always return their first parameter (\"self\",\n            # usually)\n    \n            # Re: `follow_wrapper_chains=False`\n            #\n            # getfullargspec() historically ignored __wrapped__ attributes,\n            # so we ensure that remains the case in 3.3+\n    \n>           sig = _signature_from_callable(func,\n                                           follow_wrapper_chains=False,\n                                           skip_bound_arg=False,\n                                           sigcls=Signature,\n                                           eval_str=False)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\inspect.py:1384: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nobj = <classmethod(<function TestQuestionAnswers.setup_class at 0x0000023BD4B0C900>)>\n\n    def _signature_from_callable(obj, *,\n                                 follow_wrapper_chains=True,\n                                 skip_bound_arg=True,\n                                 globals=None,\n                                 locals=None,\n                                 eval_str=False,\n                                 sigcls):\n    \n        \"\"\"Private helper function to get signature for arbitrary\n        callable objects.\n        \"\"\"\n    \n        _get_signature_of = functools.partial(_signature_from_callable,\n                                    follow_wrapper_chains=follow_wrapper_chains,\n                                    skip_bound_arg=skip_bound_arg,\n                                    globals=globals,\n                                    locals=locals,\n                                    sigcls=sigcls,\n                                    eval_str=eval_str)\n    \n        if not callable(obj):\n>           raise TypeError('{!r} is not a callable object'.format(obj))\nE           TypeError: <classmethod(<function TestQuestionAnswers.setup_class at 0x0000023BD4B0C900>)> is not a callable object\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\inspect.py:2491: TypeError\n\nThe above exception was the direct cause of the following exception:\n\nfunc = <classmethod(<function TestQuestionAnswers.setup_class at 0x0000023BD4B0C900>)>, args = (), kwargs = {}, parameters = {}\n\n    def func_parameters(func, *args, **kwargs):\n        \"\"\"\n        >>> def helper(func):\n        ...     def wrapper(*args, **kwargs):\n        ...         params = func_parameters(func, *args, **kwargs)\n        ...         print(list(params.items()))\n        ...         return func(*args, **kwargs)\n        ...     return wrapper\n    \n        >>> @helper\n        ... def args(a, b):\n        ...     pass\n    \n        >>> args(1, 2)\n        [('a', '1'), ('b', '2')]\n    \n        >>> args(*(1,2))\n        [('a', '1'), ('b', '2')]\n    \n        >>> args(1, b=2)\n        [('a', '1'), ('b', '2')]\n    \n        >>> @helper\n        ... def kwargs(a=1, b=2):\n        ...     pass\n    \n        >>> kwargs()\n        [('a', '1'), ('b', '2')]\n    \n        >>> kwargs(a=3, b=4)\n        [('a', '3'), ('b', '4')]\n    \n        >>> kwargs(b=4, a=3)\n        [('a', '3'), ('b', '4')]\n    \n        >>> kwargs(a=3)\n        [('a', '3'), ('b', '2')]\n    \n        >>> kwargs(b=4)\n        [('a', '1'), ('b', '4')]\n    \n        >>> @helper\n        ... def args_kwargs(a, b, c=3, d=4):\n        ...     pass\n    \n        >>> args_kwargs(1, 2)\n        [('a', '1'), ('b', '2'), ('c', '3'), ('d', '4')]\n    \n        >>> args_kwargs(1, 2, d=5)\n        [('a', '1'), ('b', '2'), ('c', '3'), ('d', '5')]\n    \n        >>> args_kwargs(1, 2, 5, 6)\n        [('a', '1'), ('b', '2'), ('c', '5'), ('d', '6')]\n    \n        >>> args_kwargs(1, b=2)\n        [('a', '1'), ('b', '2'), ('c', '3'), ('d', '4')]\n    \n        >>> @helper\n        ... def varargs(*a):\n        ...     pass\n    \n        >>> varargs()\n        []\n    \n        >>> varargs(1, 2)\n        [('a', '(1, 2)')]\n    \n        >>> @helper\n        ... def keywords(**a):\n        ...     pass\n    \n        >>> keywords()\n        []\n    \n        >>> keywords(a=1, b=2)\n        [('a', '1'), ('b', '2')]\n    \n        >>> @helper\n        ... def args_varargs(a, b, *c):\n        ...     pass\n    \n        >>> args_varargs(1, 2)\n        [('a', '1'), ('b', '2')]\n    \n        >>> args_varargs(1, 2, 2)\n        [('a', '1'), ('b', '2'), ('c', '(2,)')]\n    \n        >>> @helper\n        ... def args_kwargs_varargs(a, b, c=3, **d):\n        ...     pass\n    \n        >>> args_kwargs_varargs(1, 2)\n        [('a', '1'), ('b', '2'), ('c', '3')]\n    \n        >>> args_kwargs_varargs(1, 2, 4, d=5, e=6)\n        [('a', '1'), ('b', '2'), ('c', '4'), ('d', '5'), ('e', '6')]\n    \n        >>> @helper\n        ... def args_kwargs_varargs_keywords(a, b=2, *c, **d):\n        ...     pass\n    \n        >>> args_kwargs_varargs_keywords(1)\n        [('a', '1'), ('b', '2')]\n    \n        >>> args_kwargs_varargs_keywords(1, 2, 4, d=5, e=6)\n        [('a', '1'), ('b', '2'), ('c', '(4,)'), ('d', '5'), ('e', '6')]\n    \n        >>> class Class:\n        ...     @staticmethod\n        ...     @helper\n        ...     def static_args(a, b):\n        ...         pass\n        ...\n        ...     @classmethod\n        ...     @helper\n        ...     def method_args(cls, a, b):\n        ...         pass\n        ...\n        ...     @helper\n        ...     def args(self, a, b):\n        ...         pass\n    \n        >>> cls = Class()\n    \n        >>> cls.args(1, 2)\n        [('a', '1'), ('b', '2')]\n    \n        >>> cls.method_args(1, 2)\n        [('a', '1'), ('b', '2')]\n    \n        >>> cls.static_args(1, 2)\n        [('a', '1'), ('b', '2')]\n    \n        \"\"\"\n        parameters = {}\n>       arg_spec = inspect.getfullargspec(func)\n\nLib\\site-packages\\allure_commons\\utils.py:231: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfunc = <classmethod(<function TestQuestionAnswers.setup_class at 0x0000023BD4B0C900>)>\n\n    def getfullargspec(func):\n        \"\"\"Get the names and default values of a callable object's parameters.\n    \n        A tuple of seven things is returned:\n        (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations).\n        'args' is a list of the parameter names.\n        'varargs' and 'varkw' are the names of the * and ** parameters or None.\n        'defaults' is an n-tuple of the default values of the last n parameters.\n        'kwonlyargs' is a list of keyword-only parameter names.\n        'kwonlydefaults' is a dictionary mapping names from kwonlyargs to defaults.\n        'annotations' is a dictionary mapping parameter names to annotations.\n    \n        Notable differences from inspect.signature():\n          - the \"self\" parameter is always reported, even for bound methods\n          - wrapper chains defined by __wrapped__ *not* unwrapped automatically\n        \"\"\"\n        try:\n            # Re: `skip_bound_arg=False`\n            #\n            # There is a notable difference in behaviour between getfullargspec\n            # and Signature: the former always returns 'self' parameter for bound\n            # methods, whereas the Signature always shows the actual calling\n            # signature of the passed object.\n            #\n            # To simulate this behaviour, we \"unbind\" bound methods, to trick\n            # inspect.signature to always return their first parameter (\"self\",\n            # usually)\n    \n            # Re: `follow_wrapper_chains=False`\n            #\n            # getfullargspec() historically ignored __wrapped__ attributes,\n            # so we ensure that remains the case in 3.3+\n    \n            sig = _signature_from_callable(func,\n                                           follow_wrapper_chains=False,\n                                           skip_bound_arg=False,\n                                           sigcls=Signature,\n                                           eval_str=False)\n        except Exception as ex:\n            # Most of the times 'signature' will raise ValueError.\n            # But, it can also raise AttributeError, and, maybe something\n            # else. So to be fully backwards compatible, we catch all\n            # possible exceptions here, and reraise a TypeError.\n>           raise TypeError('unsupported callable') from ex\nE           TypeError: unsupported callable\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\inspect.py:1394: TypeError"}, "parameters": [{"name": "question_locator", "value": "('id', 'accordion__heading-3')"}, {"name": "answer_locator", "value": "('id', 'accordion__panel-3')"}, {"name": "expected_answer", "value": "'Только начиная с завтрашнего дня. Но скоро станем расторопнее.'"}], "start": 1726406635563, "stop": 1726406635563, "uuid": "856fd16c-f0ab-4e45-b3b7-e4ab256413c6", "historyId": "5024e09fdb05375f993bb417ba70ac87", "testCaseId": "8143f7ae7bbeb577887fae6b2f73ea05", "fullName": "test_answers_main_page.TestQuestionAnswers#test_question_answer", "labels": [{"name": "suite", "value": "Тестирование секции 'Вопросы о важном'"}, {"name": "feature", "value": "Проверка текстов вопросов и ответов"}, {"name": "subSuite", "value": "TestQuestionAnswers"}, {"name": "host", "value": "LAPTOP-UC5NMVM9"}, {"name": "thread", "value": "22768-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_answers_main_page"}]}